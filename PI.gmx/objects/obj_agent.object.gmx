<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_agent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_gene_init_random();
scr_body_init();
scr_brain_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = (((outputs[0]-.5)*2)*maxSpeed)/size;
direction += ((outputs[1]-.5)*2);

//resetting outputs
for(var i = 0; i &lt; numOutputs; i++)
{
    outputs[i] = 0;
}

if (x &gt; room_width)
{
    x  = room_width;
}

if (x &lt; 0)
{
    x = 0;
}

if (y &lt; 0)
{
    y = 0;
}

if (y &gt; room_height)
{
    y = room_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var l_eye = map[# clamp((x + lengthdir_x(16*size,direction-30)) div world.tile_size,0,(room_width div world.tile_size)-1), clamp((y + lengthdir_y(16*size,direction-30)) div world.tile_size,0,(room_height div world.tile_size)-1)];

var r_eye = map[# clamp((x + lengthdir_x(16*size,direction+30)) div world.tile_size,0,(room_width div world.tile_size)-1), clamp((y + lengthdir_y(16*size,direction+30)) div world.tile_size,0, (room_height div world.tile_size)-1)];
var l_green;
var l_blue;
var r_green;
var r_blue;

if (l_eye &gt; 0)
{
    l_green = l_eye;
    l_blue = 0;
}
else
{
    l_green = 0;
    l_blue = colour_get_blue(c_blue)/255;
}

if (r_eye &gt; 0)
{
    r_green = r_eye;
    r_blue = 0;
}
else
{
    r_green = 0;
    r_blue = colour_get_blue(c_blue)/255;
}

inputs[0] = 0;
inputs[1] = l_eye;
inputs[2] = l_blue;
inputs[3] = 0;
inputs[4] = r_eye;
inputs[5] = r_blue;
inputs[6] = 1;
inputs[7] = random(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the inputs to the hidden nodes and calculte activation
for(var i = 0; i &lt; numNeurons; i++)
{
    for(var j = 0; j &lt; numInputs; j++)
    {
        hidden[i] += inputs[j]*synapse_in[i,j];
    }
}


//hidden to hidden

for(var i = 0; i &lt; numNeurons; i++)
{
    for(var j = 0; j &lt; numNeurons; j++)
    {
        hidden[i] += hidden_0[j]*synapse_nn[#j,i];                
    }
    hidden[i] = sigmoid(hidden[i]-bias_hidden[i]);
}

//Get the outputs from the hidden
for(var i = 0; i &lt; numOutputs; i++)
{
    for(var j = 0; j &lt; numNeurons; j++)
    {
        outputs[i] += hidden[j]*synapse_on[j,i];
    }
    outputs[i] = sigmoid(outputs[i]-bias_output[i])
}

//Storing the hidden nodes values
for(var i = 0; i &lt; numNeurons; i++)
{
    hidden_0[i] = hidden[i];
    hidden[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(make_colour_rgb(col_red,col_green,col_blue));
scr_drawPolygon(x,y,8*size,sides,direction,0);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,direction,c_white,1);
draw_text(x,y,speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
